ARG ARCH=amd64
ARG NODE_VERSION=10
ARG OS=alpine

#### Stage BASE ########################################################################################################
FROM ${ARCH}/node:${NODE_VERSION}-${OS} AS base

# Copy scripts
COPY scripts/*.sh /tmp/

# Install tools, create Node-RED app and data dir, add user and set rights
RUN set -ex && \
    apk add --no-cache \
        bash \
        tzdata \
        iputils \
        curl \
        nano \
        git \
        openblas-dev \
        openssl \
        openssh-client && \
    mkdir -p /usr/src/node-red/nodecerts /data && \
    deluser --remove-home node && \
    adduser -h /usr/src/node-red -D -H node-red -u 1000 && \
    chown -R node-red:node-red /data && \
    chown -R node-red:node-red /usr/src/node-red

# Set work directory
WORKDIR /usr/src/node-red

# package.json contains Node-RED NPM module and node dependencies
COPY package.json .

#### Stage BUILD #######################################################################################################
FROM base AS build

# Install Build tools
RUN apk add --no-cache --virtual buildtools build-base linux-headers udev python && \
    npm install --unsafe-perm --no-update-notifier --only=production && \
    /tmp/remove_native_gpio.sh && \
    openssl genrsa -out /usr/src/node-red/nodecerts/node-key.pem 2048 && openssl req -new -sha256 -key /usr/src/node-red/nodecerts/node-key.pem -out /usr/src/node-red/nodecerts/node-csr.pem -subj "/C=ES/ST=Andalucia/L=Sevilla/O=ACME S.A./OU=Watson/CN=dockerwatson.acme.org/emailAddress=jimbotel@gmail.com" && openssl x509 -req -in /usr/src/node-red/nodecerts/node-csr.pem -signkey /usr/src/node-red/nodecerts/node-key.pem -out /usr/src/node-red/nodecerts/node-cert.pem && \
    cp -R node_modules prod_node_modules
 
#### Stage RELEASE #####################################################################################################
FROM base AS RELEASE
ARG BUILD_DATE
ARG BUILD_VERSION
ARG BUILD_REF
ARG NODE_RED_VERSION
ARG ARCH
ARG TAG_SUFFIX=default

LABEL org.label-schema.build-date=${BUILD_DATE} \
    org.label-schema.docker.dockerfile=".docker/Dockerfile.alpine" \
    org.label-schema.license="Apache-2.0" \
    org.label-schema.name="Node-RED" \
    org.label-schema.version=${BUILD_VERSION} \
    org.label-schema.description="Low-code programming for event-driven applications." \
    org.label-schema.url="https://nodered.org" \
    org.label-schema.vcs-ref=${BUILD_REF} \
    org.label-schema.vcs-type="Git" \
    org.label-schema.vcs-url="https://github.com/node-red/node-red-docker" \
    org.label-schema.arch=${ARCH} \
    authors="Dave Conway-Jones, Nick O'Leary, James Thomas, Raymond Mouthaan"

COPY --from=build /usr/src/node-red/prod_node_modules ./node_modules
COPY --from=build /usr/src/node-red/nodecerts ./nodecerts
COPY ./settings.tjbot.js /data/settings.js
COPY ./flows.json /data/flows.json

# Chown, install devtools & Clean up
RUN chown -R node-red:node-red /usr/src/node-red && \
    chown node-red:node-red /data/settings.js /data/flows.json && \
    /tmp/install_devtools.sh && \
    rm /tmp/*

USER node-red

# Env variables
ENV NODE_RED_VERSION=$NODE_RED_VERSION \
    NODE_PATH=/usr/src/node-red/node_modules:/data/node_modules \
    FLOWS=flows.json

# ENV NODE_RED_ENABLE_SAFE_MODE=true    # Uncomment to enable safe start mode (flows not running)
# ENV NODE_RED_ENABLE_PROJECTS=true     # Uncomment to enable projects option

# User configuration directory volume
VOLUME ["/data"]

# Expose the listening port of node-red
EXPOSE 1880

# Add a healthcheck (default every 30 secs)
# HEALTHCHECK CMD curl http://localhost:1880/ || exit 1
HEALTHCHECK CMD ps -ef | sed 's#^.*node-red  ##' | grep node-red | grep -v grep || exit 1

ENTRYPOINT ["npm", "start", "--", "--userDir", "/data"]
